#! /usr/bin/env bash

###############################################################################
# Monitor DB2 with Nagios
# Copyright 2013 Andres Gomez Casanova
# https://github.com/angoca/monitor-db2-with-nagios
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

# This script checks the quantity of connections on the database. The quantity
# can be filtered by a given criterion, and inverted if wanted.
#
# The connection state is based on the 'list application' output. However, it
# is unknown how all states are expressed. For this reason, unknown states are
# sent to a file in /tmp directory in order to catch the text. Please send us
# the content of that file in order to improve this script. Currently, those
# unknown states are listed as 'other'.
#
# This script was based on the plugins written by Felipe Alkain de Souza.
# http://www.dbatodba.com/db2/scripts-db2/nagios-plugins
#
# In order to be used in Nagios, you have to configure the following.
#
# # 'check_connection_qty' command definition
# define command {
#         command_name    check_connection_qty
#         command_line    $USER1$/check_by_ssh -H $HOSTADDRESS$ -l nagios -C "scripts/check_connection_qty -i '$ARG1$' -d '$ARG2$' -w '$ARG3$' -c '$ARG4$'"
# }
# define service{
#         host_name               db2server
#         service_description     Quantity of current connections
#         check_command           check_connection_qty!/home/db2inst1!sample!10!15
#         use                     generic-service
# }
#
# When using NRPE:
#
# In the database server:
#
# command[check_connection_qty]=/home/nagios/scripts/check_connection_qty -i /home/db2inst1 -d sample -w 10 -c 15
#
# Then modify the path according to your script location, instance home dir,
# database, filter and thresholds.
#
# In the Nagios server:
#
# define service{
#         host_name               db2server
#         service_description     Quantity of current connections
#         check_command           check_nrpe_1arg!check_connection_qty
#         use                     generic-service
# }
#
# Parameters:
# -c | --critical : Quantity of connections to be considered as critical.
# -d | --database : Database name.
# -h | --help : Show the help of this script.
# -i | --instance : Home directory of the instance. Usually it is
#   /home/db2inst1.
# -I | --ignore : Do not check threshold, only informative. It is useful
#   when only graphs want to be created with the data from this script.
# -K | --mk : Change the output for Check_MK.
# -s | --state : Shows the connection state in the performance output.
#   Normally it shows the distribution of connections by users.
# -T | --trace : Trace mode. Writes output in /tmp.
# -v | --verbose : Execute the program in verbose mode.
# -V | --version : Show the current version of this script.
# -w | --warning :  Quantity of connections to be considered as a warning.
# --filter : Extra filter for the grep.
# --inverted : Filter inverted.
#
# In AIX, the long name options are not supported.
#
# The exit codes are the standard for Nagios.
#
# 0 The plugin was able to check the service and it appeared to be functioning
#   properly.
# 1 The plugin was able to check the service, but it appeared to be above some
#   "warning" threshold or did not appear to be working properly.
# 2 The plugin detected that either the service was not running or it was above
#   some "critical" threshold.
# 3 Invalid command line arguments were supplied to the plugin or low-level
#   failures internal to the plugin (such as unable to fork, or open a tcp
#   socket) that prevent it from performing the specified operation.
#   Higher-level errors (such as name resolution errors, socket timeouts, etc)
#   are outside of the control of plugins and should generally NOT be reported
#   as UNKNOWN states.
#
# Author: Andres Gomez Casanova
# Version: v1.2 2013-05-25

# Flag for debugging.
#set -xv

# Locale to print messages in English. Prevent language problems.
export LANG=en_US

# Version of this script.
function print_revision {
  echo Andres Gomez Casanova - AngocA
  echo v1.0 2013-05-25
}
# Function to show the help
function print_usage {
  /bin/cat <<__EOT
Usage: ${1} { -i instanceHomeDirectory -d databaseName [-c][-w][-K]
[--filter][--inverted]][-I][-s] | -h | -V }[-T][-v]
__EOT
}

function print_help {
  print_revision
  print_usage ${1}
  # Max 80 chars width.
  /bin/cat <<__EOT
-------------------------------------------------------------------------------
This script checks the quantity of established connections.
-c | --critical INTEGER
   Quantity of connections to consider as critical.
   Default 15.
-d | --database STRING
   Database name.
-h | --help
   Shows the current documentation.
-i | --instance STRING
   Instance home directory. It is usually /home/db2inst1
-I | --ignore
   Ignore thresholds, show only informative information. Useful to create
   graphs descriving the activity.
-K | --mk
   Changes the output to be compatible with Check_MK.
-s | --state
   Shows the connections states in the performance output. Normally, it shows
   the distribution of connections per user.
-T | --trace
   Trace mode: writes date and output in /tmp.
-v | --verbose
   Executes the script in verbose mode (multiple times).
-V | --version
   Shows the current version of this script.
-w | --warning INTEGER
   Quantity of connections to consider as warning.
   Default 10.
--filter STRING
   Criterion to filter the data on.
--inverted STRING
   Filter inverted.

In AIX, the long name options are not supported.
__EOT
}

# Variable to control the flow execution. Prevent Spaghetti code.
CONTINUE=true

# Nagios return codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
# This is the returned code.
RETURN=${UNKNOWN}

# Nagios Output
# Text output 80 chars | Optional Perf Data Line 1
# Long text Line 1
# Long text Line 2 | Optional Perf Data Line 2
# Optional Perf Data Line 3
OUTPUT=
PERFORMANCE=
LONG_OUTPUT=
LONG_PERFORMANCE=
PERF_MK="-"

APPL_NAME=$(basename ${0})

if [[ ${#} -eq 0 ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

# Checks the operating system. geopt works different in AIX than in Linux.
OS=$(uname)

if [[ "${OS:0:5}" = "Linux" ]] ; then
  # The following requires GNU getopt. See the following discussion.
  # http://stackoverflow.com/questions/402377

  TEMP=$(getopt -o c:d:hi:IKsTvVw: --long critical:,database:,filter:,help,instance:,ignore,inverted,mk,state,trace,verbose,version,warning: \
               -n ${APPL_NAME} -- "${@}")
elif [[ "${OS:0:3}" = "AIX" ]] ; then
  set -- $(getopt c:d:hi:IKsTvVw: ${*})
elif [[ ${OS:0:6} == "Darwin" || ${OS:0:5} == "SunOS" || ${OS:0:5} == "HP-UX" ]] ; then
  echo "This plugin is not yet supported in your platform."
  echo "Please create a ticket in GitHub if you want to enable your current platform."
  echo "https://github.com/angoca/monitor-db2-with-nagios/issues"
  RETURN=${UNKNOWN}
  CONTINUE=false
elif [[ ${OS:0:6} == "CYGWIN" ]] ; then
  echo "This plugin is not supported in Cygwin"
  RETURN=${UNKNOWN}
  CONTINUE=false
else
  echo "The platform is unknown: ${OS}"
  echo "Please create a ticket in GitHub: https://github.com/angoca/monitor-db2-with-nagios/issues"
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${?} -ne 0 ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  if [[ "${OS}" = "Linux" ]] ; then
    # Note the quotes around ${TEMP}: they are essential!
    eval set -- "${TEMP}"
  fi

  HELP=false
  VERSION=false
  CHECK_MK=false
  # Verbosity level
  VERBOSE=0
  # Trace activated
  TRACE=false
  LOG=/tmp/${APPL_NAME}.log
  IGNORE_THRES=false
  INSTANCE_HOME=
  DATABASE_NAME=
  WARNING_THRES=10
  CRITICAL_THRES=15
  STATE=false
  FILTER=
  FILTER_INVERTED=false
  if [[ "${OS:0:5}" = "Linux" ]] ; then
    while true; do
      case "${1}" in
        -c | --critical ) CRITICAL_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -d | --database ) DATABASE_NAME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -h | --help ) HELP=true ; shift ;;
        -i | --instance ) INSTANCE_HOME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -I | --ignore ) IGNORE_THRES=true ; shift ;;
        -K | --mk ) CHECK_MK=true ; shift ;;
        -s | --state ) STATE=true ; shift ;;
        -T | --trace ) TRACE=true ; shift ;;
        -v | --verbose ) VERBOSE=$(( ${VERBOSE} + 1 )) ; shift ;;
        -V | --version ) VERSION=true ; shift ;;
        -w | --warning ) WARNING_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        --filter ) FILTER=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        --inverted ) FILTER_INVERTED=true ; shift ;;
        -- ) shift; break ;;
        * ) break ;;
      esac
    done
  elif [[ "${OS:0:3}" = "AIX" ]] ; then
    while [ $1 != -- ] ; do
      case "${1}" in
        -c) CRITICAL_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -d) DATABASE_NAME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -h) HELP=true ; shift ;;
        -i) INSTANCE_HOME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -I) IGNORE_THRES=true ; shift ;;
        -K) CHECK_MK=true ; shift ;;
        -s) STATE=true ; shift ;;
        -T) TRACE=true ; shift ;;
        -v) VERBOSE=$(( ${VERBOSE} + 1 )) ; shift ;;
        -V) VERSION=true ; shift ;;
        -w) WARNING_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -f) FILTER=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -n) FILTER_INVERTED=true ; shift ;;
      esac
    done
  fi
fi

if [[ ${TRACE} == true ]] ; then
  echo ">>>>>" >> ${LOG}
  date >> ${LOG}
  echo "Instance at ${INSTANCE_HOME}" >> ${LOG}
  echo "PID ${$}" >> ${LOG}
fi

ECHO="help:${HELP}, version:${VERSION}, verbose:${VERBOSE}"
ECHO="${ECHO}, directory:${INSTANCE_HOME}, database:${DATABASE_NAME}"
ECHO="${ECHO}, warning:${WARNING_THRES}, critical:${CRITICAL_THRES}"
ECHO="${ECHO}, filter:${FILTER}, inverted:${FILTER_INVERTED}, state:${STATE}"
ECHO="${ECHO}, ignore:${IGNORE_THRES}, check_mk:${CHECK_MK}"

if [[ ${VERBOSE} -ge 2 ]] ; then
  echo ${ECHO}
fi

if [[ ${TRACE} == true ]] ; then
  echo "PARAMS:${ECHO}" >> ${LOG}
fi

if [[ ${CONTINUE} == true && ${HELP} == true ]] ; then
  print_help ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${VERSION} == true ]] ; then
  print_revision ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${INSTANCE_HOME} == "" ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${DATABASE_NAME} == "" ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true
    && ( ${WARNING_THRES} == "" || ${CRITICAL_THRES} == ""
    || ! ${WARNING_THRES} =~ ^[0-9]+$ || ! ${CRITICAL_THRES} =~ ^[0-9]+$
    || ${WARNING_THRES} -le 0 || ${CRITICAL_THRES} -le 0
    || ${WARNING_THRES} -ge ${CRITICAL_THRES} ) ]] ; then
  print_usage ${APPL_NAME}
  echo "Warning threshold should be less than critical threshold."
  echo "Threshold should be greater than 0."
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  if [[ -d ${INSTANCE_HOME} && -e ${INSTANCE_HOME}/sqllib/db2profile ]] ; then
    # Load the DB2 profile.
    . ${INSTANCE_HOME}/sqllib/db2profile
    INSTANCE_NAME=$(db2 get instance | awk '/instance/ {print $7}')
  else
    OUTPUT="Instance directory is invalid."
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
fi

if [[ ${CONTINUE} == true ]] ; then
  COMMAND_DATABASE="db2 list db directory"
  if [[ ${VERBOSE} -ge 2 ]] ; then
    echo "COMMAND: ${COMMAND_DATABASE}"
  fi
  DATABASE=$(${COMMAND_DATABASE})
  if [[ ${TRACE} == true ]] ; then
    echo "RESULT:'${DATABASE}'" >> ${LOG}
  fi
  DATABASE=$(printf '%s\n' "${DATABASE}" | awk '/Database alias/ {print $4}' | grep -iw ${DATABASE_NAME})
  if [[ ${VERBOSE} -ge 3 ]] ; then
    echo "RESULT:'${DATABASE}'"
  fi

  if [[ ${DATABASE} == "" ]] ; then
    OUTPUT="The database ${DATABASE_NAME} is not cataloged."
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
fi

if [[ ${CONTINUE} == true ]] ; then
  QTY_COMMAND="db2 list applications show detail"
  if [[ ${VERBOSE} -ge 2 ]] ; then
    echo "COMMAND: ${QTY_COMMAND}"
  fi
  QTY_RESULT=$(${QTY_COMMAND})
  if [[ ${VERBOSE} -ge 3 ]] ; then
    echo "RESULT:'${QTY_RESULT}'"
  fi
  if [[ ${TRACE} == true ]] ; then
    echo "RESULT:'${QTY_RESULT}'" >> ${LOG}
  fi
  NO_APPS=$(echo ${QTY_RESULT} | grep SQL1611W)
  if [[ ${NO_APPS} == "" ]] ; then

    if [[ ${FILTER} != "" ]] ; then
      if [[ ${FILTER_INVERTED} == true ]] ; then
        CONNS=$(printf '%s\n' "${QTY_RESULT}" | grep ${DATABASE} | grep -iv ${FILTER})
      else 
        CONNS=$(printf '%s\n' "${QTY_RESULT}" | grep ${DATABASE} | grep -i ${FILTER})
      fi
    else
      CONNS=$(printf '%s\n' "${QTY_RESULT}" | grep ${DATABASE})
    fi
    QTY=$(printf '%s\n' "${CONNS}" | wc -l)
    if [[ ${STATE} == true ]] ; then
      TYPE="PerStatus"
      BACKUP=0
      COMMIT=0
      COMPILING=0
      CONNECTED=0
      DISCONNECTING=0
      LOCK_WAIT=0
      RECOMPILING=0
      RESTORE=0
      ROLLBACK=0
      ROLLBACK_TO_SAVEPOINT=0
      UOW_EXECUTING=0
      UOW_WAITING=0
      OTHER=0
      while IFS= read LINE ; do
        STATE=$(printf '%s\n' "${LINE}" | cut -c 275-304)
        if [[ ${TRACE} == true ]] ; then
          echo "RESULT:'${STATE}'"
        fi
        if [[ ${STATE} == "Connect Completed             " ]] ; then
          CONNECTED=$((${CONNECTED} + 1))
        elif [[ ${STATE} == "UOW Waiting                   " ]] ; then
          UOW_WAITING=$((${UOW_WAITING} + 1))
        elif [[ ${STATE} == "UOW Executing                 " ]] ; then
          UOW_EXECUTING=$((${UOW_EXECUTING} + 1))
        elif [[ ${STATE} == "Lock-wait                     " ]] ; then
          LOCK_WAIT=$((${LOCK_WAIT} + 1))
        elif [[ ${STATE} == "Commit Active                 " ]] ; then
          COMMIT=$((${COMMIT} + 1))
        elif [[ ${STATE} == "Rollback Active               " ]] ; then
          ROLLBACK=$((${ROLLBACK} + 1))
        elif [[ ${STATE} == "Rollback to Savepoint         " ]] ; then
          ROLLBACK_TO_SAVEPOINT=$((${ROLLBACK_TO_SAVEPOINT} + 1))
        elif [[ ${STATE} == "Compiling                     " ]] ; then
          COMPILING=$((${COMPILING} + 1))
        elif [[ ${STATE} == "Disconnect Pending            " ]] ; then
          DISCONNECTING=$((${DISCONNECTING} + 1))
        elif [[ ${STATE} == "Performing a Backup           " ]] ; then
          BACKUP=$((${BACKUP} + 1))
        elif [[ ${STATE} == "Recompiling                   " ]] ; then
          RECOMPILING=$((${RECOMPILING} + 1))
        elif [[ ${STATE} == "Restoring Database            " ]] ; then
          RESTORE=$((${RESTORE} + 1))
        else
          OTHER=$((${OTHER} + 1))
          echo "Please report the following to AngocA" >> /tmp/db2_nagios_connections_unknown_state.log
          date >> /tmp/db2_nagios_connections_unknown_state.log
          echo "'${STATE}'" >> /tmp/db2_nagios_connections_unknown_state.log
        fi
      done < <( printf '%s\n' "${CONNS}" )
      LONG_PERFORMANCE_1="'Connect_Completed'=${CONNECTED}"
      LONG_PERFORMANCE_2="'UOW_Executing'=${UOW_EXECUTING}"
      LONG_PERFORMANCE_3="'UOW_Waiting'=${UOW_WAITING}"
      LONG_PERFORMANCE_4="'Lock_Wait'=${LOCK_WAIT}"
      LONG_PERFORMANCE_5="'Commit_Active'=${COMMIT}"
      LONG_PERFORMANCE_6="'Rollback'=${ROLLBACK}"
      LONG_PERFORMANCE_7="'Rollback_to_savepoint'=${ROLLBACK_TO_SAVEPOINT}"
      LONG_PERFORMANCE_8="'Compiling'=${COMPILING}"
      LONG_PERFORMANCE_9="'Disconnecting'=${DISCONNECTING}"
      LONG_PERFORMANCE_10="'Backup'=${BACKUP}"
      LONG_PERFORMANCE_11="'Restore'=${RESTORE}"
      LONG_PERFORMANCE_12="'Recompiling'=${RECOMPILING}"
      LONG_PERFORMANCE_13="'Other'=${OTHER}"
      LONG_PERFORMANCE="${LONG_PERFORMANCE_1}\n${LONG_PERFORMANCE_2}\n${LONG_PERFORMANCE_3}\n${LONG_PERFORMANCE_4}\n${LONG_PERFORMANCE_5}\n${LONG_PERFORMANCE_6}\n${LONG_PERFORMANCE_7}\n${LONG_PERFORMANCE_8}\n${LONG_PERFORMANCE_9}\n${LONG_PERFORMANCE_10}\n${LONG_PERFORMANCE_11}\n${LONG_PERFORMANCE_12}\n${LONG_PERFORMANCE_13}"
      PERF_MK="${LONG_PERFORMANCE_1}|${LONG_PERFORMANCE_2}|${LONG_PERFORMANCE_3}|${LONG_PERFORMANCE_4}|${LONG_PERFORMANCE_5}|${LONG_PERFORMANCE_6}|${LONG_PERFORMANCE_7}|${LONG_PERFORMANCE_8}|${LONG_PERFORMANCE_9}|${LONG_PERFORMANCE_10}|${LONG_PERFORMANCE_11}|${LONG_PERFORMANCE_12}|${LONG_PERFORMANCE_13}"
    else
      TYPE="PerUser"
      QTY_FILTERED=$(printf '%s\n' "${CONNS}" | awk '{print $1}' | sort | uniq -c)
      if [[ ${VERBOSE} -ge 3 ]] ; then
        echo "RESULT FILTER:'${QTY_FILTERED}'"
      fi
      AGREGATE=0
      while IFS= read LINE ; do
        USERNAME=$(echo ${LINE} | awk '{print $2}')
        QTY_USER=$(echo ${LINE} | awk '{print $1}')
        #AGREGATE=$((${AGREGATE} + ${QTY_USER}))
        LONG_OUTPUT="${USERNAME} has ${QTY_USER},"
        #LONG_PERFORMANCE="'User_${USERNAME}'=${AGREGATE}"
        LONG_PERFORMANCE="'User_${USERNAME}'=${QTY_USER}"
        PERF_MK=${LONG_PERFORMANCE}
      done < <( printf '%s\n' "${QTY_FILTERED}" )
    fi
    if [[ ${VERBOSE} -ge 3 ]] ; then
      echo "RESULT:'${QTY}'"
    fi

    if [[ ${IGNORE_THRES} == false ]] ; then
      if [[ ${QTY} -lt ${WARNING_THRES} ]] ; then
         OUTPUT="OK. Normal quantity of connections (${QTY})."
         RETURN=${OK}
      elif [[ ${QTY} -lt ${CRITICAL_THRES} ]] ; then
         OUTPUT="Quantity of connections is increasing, currently ${QTY}."
         RETURN=${WARNING}
      else
         OUTPUT="Quantity of connections is critical, currently ${QTY}."
         RETURN=${CRITICAL}
      fi
      PERFORMANCE="'Connections'=${QTY};${WARNING_THRES};${CRITICAL_THRES}"
    else
      OUTPUT="OK. Threshold ignored."
      RETURN=${OK}
      PERFORMANCE="'Connections'=${QTY}"
    fi
  else
    OUTPUT="Problem retreiving the applications list"
    RETURN=${UNKNOWN}
    if [[ ${STATE} == true ]] ; then
      TYPE="PerStatus"
    else
      TYPE="PerUser"
    fi
  fi
fi

# Prints the output.
if [[ ${OUTPUT} == "" ]] ; then
  OUTPUT="Note: The test was not executed."
fi
# Builds the output.
if [[ ${CHECK_MK} == true ]] ; then
  echo "${RETURN} connectionsQty${TYPE}-${INSTANCE_NAME}-${DATABASE_NAME} ${PERF_MK} ${OUTPUT}"
else
  echo -e "${OUTPUT}|${PERFORMANCE}\n${LONG_OUTPUT}|${LONG_PERFORMANCE}"
fi
# Returns the error code.
if [[ ${VERBOSE} -ge 2 ]] ; then
  echo "Return code: ${RETURN}"
fi
if [[ ${TRACE} == true ]] ; then
  echo -e "OUTPUT:${OUTPUT}\nPERF:${PERFORMANCE}\nLONG_OUT:${LONG_OUTPUT}\nLONGPERF:${LONG_PERFORMANCE}\nRET_CODE:${RETURN}" >> ${LOG}
  date >> ${LOG}
  echo -e "<<<<<\n" >> ${LOG}
fi
exit ${RETURN}

