#! /usr/bin/env bash

###############################################################################
# Monitor DB2 with Nagios
# Copyright 2013,2014,2015 Andres Gomez Casanova
# https://github.com/angoca/monitor-db2-with-nagios
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

# Checks the memory usage by an instance. It does not take into account the
# bufferpools, or other memory dumps, it just takes the result of the query.
# The query is executed against the first connectable database of an instance.
# The user used to execute the script should have a special privileges in at
# least one of the database of the instance analyzed; the privilege are:
#  db2 grant execute on package NULLID.SQLC2H21 to user nagios
#  db2 grant execute on specific function SYSPROC.ADMIN_GET_DBP_MEM_USAGE to user nagios
#  db2 grant execute on specific function SYSPROC.ADMIN_GET_DBP_MEM_USAGE_AP to user nagios
#  db2 db2 grant usage on workload SYSDEFAULTUSERWORKLOAD to user nagios
#
# In order to be used in Nagios, you have to configure the following.
#
# # 'check_instance_memory' command definition
# define command {
#         command_name    check_instance_memory
#         command_line    $USER1$/check_by_ssh -H $HOSTADDRESS$ -l nagios -C "scripts/check_instance_memory -i '$ARG1$'"
# }
# define service{
#         host_name               db2server
#         service_description     Memory used by the instance
#         check_command           check_instance_memory!/home/db2inst1
#         use                     generic-service
# }
#
# When using NRPE:
#
# In the database server:
#
# command[check_instance_memory]=/home/nagios/scripts/check_instance_memory -i /home/db2inst1
#
# Then modify the path according to your script location, instance home dir,
# database, filter and thresholds.
#
# In the Nagios server:
#
# define service{
#         host_name               db2server
#         service_description     Memory used by the instance
#         check_command           check_nrpe_1arg!check_connection_qty
#         use                     generic-service
# }
#
# Parameters:
# -c | --critical : Quantity of used memory to be considered as critical.
# -h | --help : Show the help of this script.
# -i | --instance : Home directory of the instance. Usually it is
#   /home/db2inst1.
# -K | --mk : Change the output for Check_MK.
# -l | --limit : Memory limit. If nothing, the script always returns OK.
# -T | --trace : Trace mode. Writes output in /tmp.
# -v | --verbose : Execute the program in verbose mode.
# -V | --version : Show the current version of this script.
# -w | --warning : Quantity of used memory to be considered as critical.
#
# In AIX, the long name options are not supported.
#
# The exit codes are the standard for Nagios.
#
# 0 The plugin was able to check the service and it appeared to be functioning
#   properly.
# 1 The plugin was able to check the service, but it appeared to be above some
#   "warning" threshold or did not appear to be working properly.
# 2 The plugin detected that either the service was not running or it was above
#   some "critical" threshold.
# 3 Invalid command line arguments were supplied to the plugin or low-level
#   failures internal to the plugin (such as unable to fork, or open a tcp
#   socket) that prevent it from performing the specified operation.
#   Higher-level errors (such as name resolution errors, socket timeouts, etc)
#   are outside of the control of plugins and should generally NOT be reported
#   as UNKNOWN states.
#
# Author: Andres Gomez Casanova
# Version: v1.1 2015-10-15

# Flag for debugging.
#set -xv

# Locale to print messages in English. Prevent language problems.
export LANG=en_US

# Version of this script.
function print_revision {
  echo Andres Gomez Casanova - AngocA
  echo v1.1 2015-10-15
}
# Function to show the help
function print_usage {
  /bin/cat <<__EOT
Usage: ${1} { -i instanceHomeDirectory [-l][-c][-w][-K] | -h 
| -V }[-T][-v]
__EOT
}

function print_help {
  print_revision
  print_usage ${1}
  # Max 80 chars width.
  /bin/cat <<__EOT
-------------------------------------------------------------------------------
Checks the memory usage at an instance (all nodes).

-c | --critical INTEGER
   Quantity of memory considered as critical. Limit option should be active.
   Default 900.
-h | --help
   Shows the current documentation.
-i | --instance STRING
   Instance home directory. It is usually /home/db2inst1.
-K | --mk
   Changes the output to be compatible with Check_MK.
-l | --limit
   Check the usage with a given limit (thresholds). If this option is not
   given, the script always returns OK.
-T | --trace
   Trace mode: writes date and output in /tmp.
-v | --verbose
   Executes the script in verbose mode (multiple times).
-V | --version
   Shows the current version of this script.
-w | --warning INTEGER
   Quantity of memory considered as warning. Limit option should be active.
   Default 800.

In AIX, the long name options are not supported.
__EOT
}

# Variable to control the flow execution. Prevent Spaghetti code.
CONTINUE=true

# Nagios return codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
# This is the returned code.
RETURN=${UNKNOWN}

# Nagios Output
# Text output 80 chars | Optional Perf Data Line 1
# Long text Line 1
# Long text Line 2 | Optional Perf Data Line 2
# Optional Perf Data Line 3
OUTPUT=
PERFORMANCE=
LONG_OUTPUT=
LONG_PERFORMANCE=
PERF_MK="-"

APPL_NAME=$(basename ${0})

echo "$(date +"%Y-%m-%d-%H.%M.%S") $$ Started ${APPL_NAME} $@" >> /tmp/${APPL_NAME}.log

# Checks the lock file does not exist.
# The lock file is the way the command was called with its parameters
# without spaces.
COPY_ARGS=("${@}") 
LOCK_FILE=
for VALUE in "${COPY_ARGS[@]}" ; do
  LOCK_FILE="${LOCK_FILE}${VALUE}"
done
LOCK_FILE=${LOCK_FILE//\//}
LOCK_FILE=${LOCK_FILE//\\/}
LOCK_FILE=${LOCK_FILE//\:/}
LOCK_FILE=${LOCK_FILE//\*/}
LOCK_FILE=${LOCK_FILE//\|/}
LOCK_FILE="/tmp/${APPL_NAME}${LOCK_FILE}.lock"
if [[ ! -r ${LOCK_FILE} ]] ; then
  echo $$ > ${LOCK_FILE}
  LOCKED=true
else
  # If it exist, then check if the process is running.
  EXIST=$(ps -ef | grep $(cat ${LOCK_FILE}) | grep ${APPL_NAME})
  # If process is not running, delete it.
  if [[ ${EXIST} == "" ]] ; then
    rm ${LOCK_FILE}
    if [[ ! -r ${LOCK_FILE} ]] ; then
      echo $$ > ${LOCK_FILE}
      LOCKED=true
    else
      OUTPUT="The lock file cannot be replaced: ${LOCK_FILE}"
      CONTINUE=false
      RETURN=${UNKNOWN}
    fi
  else
    OUTPUT="An instance of the script with the same parameters is already running."
    CONTINUE=false
    RETURN=${UNKNOWN}
  fi
fi

if [[ ${#} -eq 0 ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

# Checks the operating system. geopt works different in AIX than in Linux.
OS=$(uname)

if [[ "${OS:0:5}" == "Linux" ]] ; then
  # The following requires GNU getopt. See the following discussion.
  # http://stackoverflow.com/questions/402377

  TEMP=$(getopt -o c:hi:KlTvVw: --long critical:,help,instance:,mk,limit,trace,verbose,version,warning: \
               -n ${APPL_NAME} -- "${@}")

elif [[ "${OS:0:3}" == "AIX" ]] ; then
  set -- $(getopt c:hi:KlTvVw: ${*})
elif [[ "${OS:0:6}" == "Darwin" || "${OS:0:5}" == "SunOS" || "${OS:0:5}" == "HP-UX" ]] ; then
  echo "This plugin is not yet supported in your platform."
  echo "Please create a ticket in GitHub if you want to enable your current platform."
  echo "https://github.com/angoca/monitor-db2-with-nagios/issues"
  RETURN=${UNKNOWN}
  CONTINUE=false
elif [[ "${OS:0:6}" == "CYGWIN" ]] ; then
  echo "This plugin is not supported in Cygwin"
  RETURN=${UNKNOWN}
  CONTINUE=false
else
  echo "The platform is unknown: ${OS}"
  echo "Please create a ticket in GitHub: https://github.com/angoca/monitor-db2-with-nagios/issues"
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${?} -ne 0 ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  if [[ "${OS}" == "Linux" ]] ; then
    # Note the quotes around ${TEMP}: they are essential!
    eval set -- "${TEMP}"
  fi

  HELP=false
  VERSION=false
  CHECK_MK=false
  # Verbosity level
  VERBOSE=0
  # Trace activated
  TRACE=false
  LOG=/tmp/${APPL_NAME}.log
  INSTANCE_HOME=
  LIMIT=false
  WARNING_THRES=800
  CRITICAL_THRES=900
  if [[ "${OS:0:5}" = "Linux" ]] ; then
    while true; do
      case "${1}" in
        -c | --critical ) CRITICAL_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -h | --help ) HELP=true ; shift ;;
        -i | --instance ) INSTANCE_HOME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -K | --mk ) CHECK_MK=true ; shift ;;
        -l | --limit ) LIMIT=true ; shift ;;
        -T | --trace ) TRACE=true ; shift ;;
        -v | --verbose ) VERBOSE=$(( ${VERBOSE} + 1 )) ; shift ;;
        -V | --version ) VERSION=true ; shift ;;
        -w | --warning ) WARNING_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -- ) shift ; break ;;
        * ) break ;;
      esac
    done
  elif [[ "${OS:0:3}" = "AIX" ]] ; then
    while [[ $1 != -- ]] ; do
      case "${1}" in
        -c) CRITICAL_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -h) HELP=true ; shift ;;
        -i) INSTANCE_HOME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -K | --mk ) CHECK_MK=true ; shift ;;
        -l) LIMIT=true ; shift ;;
        -T) TRACE=true ; shift ;;
        -v) VERBOSE=$(( ${VERBOSE} + 1 )) ; shift ;;
        -V) VERSION=true ; shift ;;
        -w) WARNING_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        * ) break ;;
      esac
    done
  fi
fi

if [[ ${TRACE} == true ]] ; then
  echo ">>>>>" >> ${LOG}
  date >> ${LOG}
  echo "Instance at ${INSTANCE_HOME}" >> ${LOG}
  echo "PID ${$}" >> ${LOG}
fi

ECHO="help:${HELP}, version:${VERSION}, verbose:${VERBOSE}"
ECHO="${ECHO}, directory:${INSTANCE_HOME}, limit:${LIMIT}"
ECHO="${ECHO}, check_mk:${CHECK_MK}"
ECHO="${ECHO}, warning:${WARNING_THRES}, critical:${CRITICAL_THRES}"

if [[ ${VERBOSE} -ge 2 ]] ; then
  echo ${ECHO}
fi

if [[ ${TRACE} == true ]] ; then
  echo "PARAMS:${ECHO}" >> ${LOG}
fi

if [[ ${CONTINUE} == true && ${HELP} == true ]] ; then
  print_help ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${VERSION} == true ]] ; then
  print_revision ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${INSTANCE_HOME} == "" ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true
    && ( ${WARNING_THRES} == "" || ${CRITICAL_THRES} == ""
    || ! ${WARNING_THRES} =~ ^[0-9]+$ || ! ${CRITICAL_THRES} =~ ^[0-9]+$
    || ${WARNING_THRES} -le 0 || ${CRITICAL_THRES} -le 0
    || ${WARNING_THRES} -ge ${CRITICAL_THRES} ) ]] ; then
  print_usage ${APPL_NAME}
  echo "Warning threshold should be less than critical threshold."
  echo "Threshold should be greater than 0."
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  # Trims the characters.
  INSTANCE_HOME=$(echo ${INSTANCE_HOME} | cut -d' ' -f1)
  if [[ -d ${INSTANCE_HOME} && -e ${INSTANCE_HOME}/sqllib/db2profile ]] ; then
    # Load the DB2 profile.
    . ${INSTANCE_HOME}/sqllib/db2profile
    INSTANCE_NAME=$(db2 get instance | awk '/instance/ {print $7}')
  else
    OUTPUT="Instance directory is invalid."
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
fi

if [[ ${CONTINUE} == true ]] ; then
  COMMAND_DATABASE="db2 list db directory"
  if [[ ${VERBOSE} -ge 2 ]] ; then
    echo "COMMAND: ${COMMAND_DATABASE}"
  fi
  DATABASE=$(${COMMAND_DATABASE})
  if [[ ${TRACE} == true ]] ; then
    echo "RESULT:'${DATABASE}'" >> ${LOG}
  fi
  DB_LIST=$(printf '%s\n' "${DATABASE}" | awk '/Database alias/ {print $4}')
  if [[ ${VERBOSE} -ge 3 ]] ; then
    echo "RESULT:'${DB_LIST}'"
  fi

  COMMAND="
SELECT 
 DBPARTITIONNUM,
 MAX_PARTITION_MEM/1048576 AS MAX_MEM_MB,
 CURRENT_PARTITION_MEM/1048576 AS CURRENT_MEM_MB 
FROM TABLE (SYSPROC.ADMIN_GET_DBP_MEM_USAGE()) AS T;"
  if [[ ${VERBOSE} -ge 2 ]] ; then
    echo "COMMAND: ${COMMAND}"
  fi
  CONT=true
  while read -r LINE && ${CONT} == true ; do
    DATABASE=${LINE}
    RESULT=$(db2 connect to ${DATABASE} > /dev/null ; echo ${COMMAND} | db2 +p -tx ; db2 connect reset > /dev/null)
    if [[ ${VERBOSE} -ge 3 ]] ; then
      echo "RESULT:'${RESULT}'"
    fi
    # Check for errors
    CONN_ERROR=$(echo ${RESULT} | grep SQL1024)

    SELECT_ERROR=$(echo ${RESULT} | grep SQL0551)
    if [[ ${CONN_ERROR} == "error" ]] ; then
      LONG_OUTPUT=${RESULT}
      unset RESULT
      if [[ ${VERBOSE} -ge 2 ]] ; then
        echo "Connection error at ${DATABASE}"
      fi
    elif [[ ${SELECT_ERROR} != "" ]] ; then
      LONG_OUTPUT=${RESULT}
      unset RESULT
      if [[ ${VERBOSE} -ge 2 ]] ; then
        echo "Lack of permissions at ${DATABASE}"
      fi
    else
      RESULT_ERROR=$(echo ${RESULT} | grep SQL)
      if [[ -z ${RESULT_ERROR} ]] ; then
        # No error for the query result, thus break the while.
        CONT=false
      fi
    fi
  done < <(printf '%s\n' "${DB_LIST}" )
  # There was not any database connection. Empty result.
  if [[ -z ${RESULT} ]] ; then
    OUTPUT="No connection to the databases in the instance at ${INSTANCE_HOME}."
    OUTPUT="${OUTPUT} Or the user does not have the required authorization"
    OUTPUT="${OUTPUT} to perform the query in any database."
    RETURN=${UNKNOWN}
  else
    while read -r LINE ; do
      NODE=$(echo ${LINE} | awk '{print $1}')
      MAX=$(echo ${LINE} | awk '{print $2}')
      CURRENT=$(echo ${LINE} | awk '{print $3}')
      if [[ ${LIMIT} == true ]] ; then
        if [[ ${CURRENT} -lt ${WARNING_THRES} ]] ; then
          OUTPUT="${OUTPUT} OK for node ${NODE}."
          if [[ ${RETURN} -gt ${OK} ]] ; then
            RETURN=${RETURN}
          else
            RETURN=${OK}
          fi
        elif [[ ${CURRENT} -lt ${CRITICAL_THRES} ]] ; then
          OUTPUT="${OUTPUT} Memory usage is increasing at node ${NODE}."
          if [[ ${RETURN} -gt ${WARNING} ]] ; then
            RETURN=${RETURN}
          else
            RETURN=${WARNING}
          fi
        else
          OUTPUT="${OUTPUT} Memory usage is critical at node ${NODE}."
          RETURN=${CRITICAL}
        fi
      fi
      if [[ ${LIMIT} == false ]] ; then
        OUTPUT="OK, memory usage is automatically."
        RETURN=${OK}
      fi
      LONG_OUTPUT="${LONG_OUTPUT} At node ${NODE} the max usage memory is ${MAX}MB and the current usage memory ${CURRENT}MB."
      PERFORMANCE="${PERFORMANCE} 'Current_memory_at_node_${NODE}'=${CURRENT}MB"
      LONG_PERFORMANCE="${LONG_PERFORMANCE} 'Max_memory_at_node_${NODE}'=${MAX}MB"
      if [[ ${PERF_MK} == "-" ]] ; then
        PERF_MK="'Current_memory_at_node_${NODE}'=${CURRENT}MB|'Max_memory_at_node_${NODE}'=${MAX}MB"
      else
        PERF_MK="'Current_memory_at_node_${NODE}'=${CURRENT}MB|${PERy_MK}|'Max_memory_at_node_${NODE}'=${MAX}MB"
      fi 
    done < <(printf '%s\n' "${RESULT}" )
  fi
fi

# Prints the output.
if [[ ${OUTPUT} == "" ]] ; then
  OUTPUT="Note: The test was not executed."
fi
# Builds the output.
if [[ ${CHECK_MK} == true ]] ; then
  echo "${RETURN} instanceMemory-${INSTANCE_NAME} ${PERF_MK} ${OUTPUT}"
else
  echo -e "${OUTPUT}|${PERFORMANCE}\n${LONG_OUTPUT}|${LONG_PERFORMANCE}"
fi
# Returns the error code.
if [[ ${VERBOSE} -ge 2 ]] ; then
  echo "Return code: ${RETURN}"
fi
if [[ ${TRACE} == true ]] ; then
  echo -e "OUTPUT:${OUTPUT}\nPERF:${PERFORMANCE}\nLONG_OUT:${LONG_OUTPUT}\nLONGPERF:${LONG_PERFORMANCE}\nRET_CODE:${RETURN}" >> ${LOG}
  date >> ${LOG}
  echo -e "<<<<<\n" >> ${LOG}
fi

if [[ ${LOCKED} == true && -r ${LOCK_FILE} ]] ; then
  rm ${LOCK_FILE}
fi

echo "$(date +"%Y-%m-%d-%H.%M.%S") $$ Ended ${APPL_NAME} ${COPY_ARGS[@]}" >> /tmp/${APPL_NAME}.log

exit ${RETURN}

