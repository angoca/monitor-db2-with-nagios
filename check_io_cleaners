#! /usr/bin/env bash

###############################################################################
# Monitor DB2 with Nagios
# Copyright 2013,2014,2015 Andres Gomez Casanova
# https://github.com/angoca/monitor-db2-with-nagios
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

# Checks the performance of the IO cleaners (Page cleaners) by calculating the
# percentage between Sync and Async writes, and the percentage between the
# page cleaner triggers (LSN Gap cleaner trigger, dirty page steal clean
# trigger and Dirty page threshold cleaner.
#
# These formulas were taken from different sites:
# * http://books.google.fr/books?id=KdBLn-LQ0n4C&pg=PA110&lpg=PA110&dq=pbpct+percentage+of+bad+page+cleaner+trigger&source=bl&ots=WZNE0msIaO&sig=6Kk4VWXK0Yw1EusO82U8w4FhTGs&hl=en&sa=X&ei=F-cbVMbuLMXnOf_ygbAO&ved=0CCMQ6AEwAA#v=onepage&q=pbpct%20percentage%20of%20bad%20page%20cleaner%20trigger&f=false
# * http://www.ebenner.com/db2dba_blog/
# * http://www.dbisoftware.com/blog/db2_performance.php?id=117
#
# In order to be used in Nagios, you have to configure the following.
#
# # 'check_io_cleaners' command definition
# define command {
#         command_name    check_io_cleaners
#         command_line    $USER1$/check_by_ssh -H $HOSTADDRESS$ -l nagios -C "scripts/check_io_cleaners -i '$ARG1$' -d '$ARG2$'"
# }
# define service{
#         host_name               db2server
#         service_description     IO cleaners
#         check_command           check_io_cleaners!/home/db2inst1
#         use                     generic-service
# }
#
# When using NRPE:
#
# In the database server:
#
# command[check_io_cleaners]=/home/nagios/scripts/check_io_cleaners -i /home/db2inst1 -d sample
#
# Then modify the path according to your script location and instance home dir.
#
# In the Nagios server:
#
# define service{
#         host_name               db2server
#         service_description     IO cleaners
#         check_command           check_nrpe_1arg!check_io_cleaners
#         use                     generic-service
# }
#
# It is necessary to execute this script with a user with at least SYSMON authority, in
# order to execute db2pd.
#
# Parameters:
# -a | --async : Changes the behaviour of the script to check the percentage
#   of synchronous versus asynchronous writes. By default, the script checks
#   the PBPCT.
# -c | --critical : Percentage of PBPCT that is considered as critical.
# -d | --database : Database name.
# -h | --help : Show the help of this script.
# -i | --instance : Home directory of the instance. Usually it is
#   /home/db2inst1.
# -K | --mk : Change the output for Check_MK.
# -S | --single : Performance data in single line.
# -T | --trace : Trace mode. Writes output in /tmp.
# -v | --verbose : Execute the program in verbose mode.
# -V | --version : Show the current version of this script.
# -w | --warning : Percentage of PBPCT that is considered as warning.
#
# In AIX, the long name options are not supported.
#
# The exit codes are the standard for Nagios.
#
# 0 The plugin was able to check the service and it appeared to be functioning
#   properly.
# 1 The plugin was able to check the service, but it appeared to be above some
#   "warning" threshold or did not appear to be working properly.
# 2 The plugin detected that either the service was not running or it was above
#   some "critical" threshold.
# 3 Invalid command line arguments were supplied to the plugin or low-level
#   failures internal to the plugin (such as unable to fork, or open a tcp
#   socket) that prevent it from performing the specified operation.
#   Higher-level errors (such as name resolution errors, socket timeouts, etc)
#   are outside of the control of plugins and should generally NOT be reported
#   as UNKNOWN states.
#
# Author: Andres Gomez Casanova
# Version: v1.1  2015-10-15

# Flag for debugging.
#set -xv

# Locale to print messages in English. Prevent language problems.
export LANG=en_US

# Version of this script.
function print_revision {
  echo Andres Gomez Casanova - AngocA
  echo v1.1 2015-10-15
}
# Function to show the help
function print_usage {
  /bin/cat <<__EOT
Usage: ${1} { -i instanceHomeDirectory -d databaseName [-c][-w][-a][-S][-K] | -h
| -V } [-T][-v]
__EOT
}

function print_help {
  print_revision
  print_usage ${1}
  # Max 80 chars width.
  /bin/cat <<__EOT
-------------------------------------------------------------------------------
Checks the performance of the IO Cleaners: The percentage of triggers and the
proportion between Sync and Async writes.
-a | --async
   Change the behaviour of the script. Checks the proportion of synchronous and
   asynchronous writings.
-c | --critical INTEGER
   Percentage of "Dirty page steal cleaner trigger" to be considered as
   critical.
   Default 40.
   With -a: 90
-d | --database STRING
   Database name.
-h | --help
   Shows the current documentation.
-i | --instance STRING
   Instance home directory. It is usually /home/db2inst1.
-K | --mk
   Changes the output to be compatible with Check_MK.
-S | --single
   Writes all the performance output in one line.
-T | --trace
   Trace mode: writes date and output in /tmp.
-v | --verbose
   Executes the script in verbose mode (multiple times).
-V | --version
   Shows the current version of this script.
-w | --warning INTEGER
   Percentage of "dirty page steal cleaner trigger" to be considered as
   warning.
   Default 20.
   With -a: 80.

In AIX, the long name options are not supported.
__EOT
}

# Variable to control the flow execution. Prevent Spaghetti code.
CONTINUE=true

# Nagios return codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
# This is the returned code.
RETURN=${UNKNOWN}

# Nagios Output
# Text output 80 chars | Optional Perf Data Line 1
# Long text Line 1
# Long text Line 2 | Optional Perf Data Line 2
# Optional Perf Data Line 3
OUTPUT=
PERFORMANCE=
LONG_OUTPUT=
LONG_PERFORMANCE=
PERF_MK="-"

APPL_NAME=$(basename ${0})

echo "$(date +"%Y-%m-%d-%H.%M.%S") $$ Started ${APPL_NAME} $@" >> /tmp/${APPL_NAME}.log

# Checks the lock file does not exist.
# The lock file is the way the command was called with its parameters
# without spaces.
COPY_ARGS=("${@}") 
LOCK_FILE=
for VALUE in "${COPY_ARGS[@]}" ; do
  LOCK_FILE="${LOCK_FILE}${VALUE}"
done
LOCK_FILE=${LOCK_FILE//\//}
LOCK_FILE=${LOCK_FILE//\\/}
LOCK_FILE=${LOCK_FILE//\:/}
LOCK_FILE=${LOCK_FILE//\*/}
LOCK_FILE=${LOCK_FILE//\|/}
LOCK_FILE="/tmp/${APPL_NAME}${LOCK_FILE}.lock"
if [[ ! -r ${LOCK_FILE} ]] ; then
  echo $$ > ${LOCK_FILE}
  LOCKED=true
else
  # If it exist, then check if the process is running.
  EXIST=$(ps -ef | grep $(cat ${LOCK_FILE}) | grep ${APPL_NAME})
  # If process is not running, delete it.
  if [[ ${EXIST} == "" ]] ; then
    rm ${LOCK_FILE}
    if [[ ! -r ${LOCK_FILE} ]] ; then
      echo $$ > ${LOCK_FILE}
      LOCKED=true
    else
      OUTPUT="The lock file cannot be replaced: ${LOCK_FILE}"
      CONTINUE=false
      RETURN=${UNKNOWN}
    fi
  else
    OUTPUT="An instance of the script with the same parameters is already running."
    CONTINUE=false
    RETURN=${UNKNOWN}
  fi
fi

if [[ ${#} -eq 0 ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

# Checks the operating system. geopt works different in AIX than in Linux.
OS=$(uname)

if [[ "${OS:0:5}" == "Linux" ]] ; then
  # The following requires GNU getopt. See the following discussion.
  # http://stackoverflow.com/questions/402377

  # TODO Add the arguments here. One char in -o, multiple char in -long.
  TEMP=$(getopt -o ac:d:hi:KSTvVw: --long async,critical:,database:,help,instance:,mk,simple,trace,verbose,version,warning: \
               -n ${APPL_NAME} -- "${@}")
elif [[ "${OS:0:3}" == "AIX" ]] ; then
  set -- $(getopt ac:d:hi:KSTvVw: ${*})
elif [[ "${OS:0:6}" == "Darwin" || "${OS:0:5}" == "SunOS" || "${OS:0:5}" == "HP-UX" ]] ; then
  echo "This plugin is not yet supported in your platform."
  echo "Please create a ticket in GitHub if you want to enable your current platform."
  echo "https://github.com/angoca/monitor-db2-with-nagios/issues"
  RETURN=${UNKNOWN}
  CONTINUE=false
elif [[ "${OS:0:6}" == "CYGWIN" ]] ; then
  echo "This plugin is not supported in Cygwin"
  RETURN=${UNKNOWN}
  CONTINUE=false
else
  echo "The platform is unknown: ${OS}"
  echo "Please create a ticket in GitHub: https://github.com/angoca/monitor-db2-with-nagios/issues"
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${?} -ne 0 ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  if [[ "${OS}" = "Linux" ]] ; then
    # Note the quotes around ${TEMP}: they are essential!
    eval set -- "${TEMP}"
  fi
  HELP=false
  VERSION=false
  CHECK_MK=false
  # Behaviour of the script
  ASYNC=false
  # Verbosity level
  VERBOSE=0
  # Single line
  SINGLE=false
  # Trace activated
  TRACE=false
  LOG=/tmp/${APPL_NAME}.log
  TMP_FILE="/tmp/${APPL_NAME}_snap"
  INSTANCE_HOME=
  DATABASE_NAME=
  WARNING_THRES=20
  CRITICAL_THRES=40
  if [[ "${OS:0:5}" = "Linux" ]] ; then
    while true; do
      case "${1}" in
        -a | --async ) ASYNC=true ; shift ;;
        -c | --critical ) CRITICAL_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -d | --database ) DATABASE_NAME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -h | --help ) HELP=true ; shift ;;
        -i | --instance ) INSTANCE_HOME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -K | --mk ) CHECK_MK=true ; shift ;;
        -S | --single ) SINGLE=true ; shift ;;
        -T | --trace ) TRACE=true ; shift ;;
        -v | --verbose ) VERBOSE=$(( ${VERBOSE} + 1 )) ; shift ;;
        -V | --version ) VERSION=true ; shift ;;
        -w | --warning ) WARNING_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -- ) shift ; break ;;
        * ) break ;;
      esac
    done
  elif [[ "${OS:0:3}" = "AIX" ]] ; then
    while [[ $1 != -- ]] ; do
      case "${1}" in
        -a) ASYNC=true ; shift ;;
        -c) CRITICAL_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -d) DATABASE_NAME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -h) HELP=true ; shift ;;
        -i) INSTANCE_HOME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -K) CHECK_MK=true ; shift ;;
        -S) SINGLE=true ; shift ;;
        -T) TRACE=true ; shift ;;
        -v) VERBOSE=$(( ${VERBOSE} + 1 )) ; shift ;;
        -V) VERSION=true ; shift ;;
        -w) WARNING_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        * ) break ;;
      esac
    done
  fi
fi

if [[ ${TRACE} == true ]] ; then
  echo ">>>>>" >> ${LOG}
  date >> ${LOG}
  echo "Instance at ${INSTANCE_HOME}" >> ${LOG}
  echo "PID ${$}" >> ${LOG}
fi

ECHO="help:${HELP}, version:${VERSION}, verbose:${VERBOSE}, async:${ASYNC}"
ECHO="${ECHO}, single:${SINGLE}, check_mk:${CHECK_MK}"
ECHO="${ECHO}, directory:${INSTANCE_HOME}, database:${DATABASE_NAME}"
ECHO="${ECHO}, warning:${WARNING_THRES}, critical:${CRITICAL_THRES}"

if [[ ${VERBOSE} -ge 2 ]] ; then
  echo ${ECHO}
fi

if [[ ${TRACE} == true ]] ; then
  echo "PARAMS:${ECHO}" >> ${LOG}
fi

if [[ ${CONTINUE} == true && ${HELP} == true ]] ; then
  print_help ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${VERSION} == true ]] ; then
  print_revision ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${INSTANCE_HOME} == "" ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${DATABASE_NAME} == "" ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  if [[ ${ASYNC} == true ]] ; then
    if [[ ${WARNING_THRES} == "" || ${CRITICAL_THRES} == ""
        || ! ${WARNING_THRES} =~ ^[0-9]+$ || ! ${CRITICAL_THRES} =~ ^[0-9]+$
        || ${WARNING_THRES} -le 0 || ${CRITICAL_THRES} -le 0
        || ${WARNING_THRES} -le ${CRITICAL_THRES} ]] ; then
      print_usage ${APPL_NAME}
      echo "Warning threshold should be less than critical threshold."
      echo "Threshold should be greater than 0."
      RETURN=${UNKNOWN}
      CONTINUE=false
    fi
  else
    if [[ ${WARNING_THRES} == "" || ${CRITICAL_THRES} == ""
        || ! ${WARNING_THRES} =~ ^[0-9]+$ || ! ${CRITICAL_THRES} =~ ^[0-9]+$
        || ${WARNING_THRES} -le 0 || ${CRITICAL_THRES} -le 0
        || ${WARNING_THRES} -ge ${CRITICAL_THRES} ]] ; then
      print_usage ${APPL_NAME}
      echo "Warning threshold should be greater than critical threshold."
      echo "Threshold should be greater than 0."
      RETURN=${UNKNOWN}
      CONTINUE=false
    fi
  fi
fi

if [[ ${CONTINUE} == true ]] ; then
  if [[ -d ${INSTANCE_HOME} && -e ${INSTANCE_HOME}/sqllib/db2profile ]] ; then
    # Load the DB2 profile.
    . ${INSTANCE_HOME}/sqllib/db2profile
    INSTANCE_NAME=$(db2 get instance | awk '/instance/ {print $7}')
  else
    OUTPUT="Instance directory is invalid."
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
fi

if [[ ${CONTINUE} == true ]] ; then
  COMMAND_DATABASE="db2 list db directory"
  if [[ ${VERBOSE} -ge 2 ]] ; then
    echo "COMMAND: ${COMMAND_DATABASE}"
  fi
  DATABASE=$(${COMMAND_DATABASE})
  if [[ ${TRACE} == true ]] ; then
    echo "RESULT:'${DATABASE}'" >> ${LOG}
  fi
  DATABASE=$(printf '%s\n' "${DATABASE}" | awk '/Database alias/ {print $4}' | grep -iw ${DATABASE_NAME})
  if [[ ${VERBOSE} -ge 3 ]] ; then
    echo "RESULT:'${DATABASE}'"
  fi
  if [[ ${DATABASE} == "" ]] ; then
    OUTPUT="The database ${DATABASE_NAME} is not catalogued."
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
fi

if [[ ${CONTINUE} == true ]] ; then
  if [[ ${ASYNC} == false ]] ; then
    TYPE="PBPCT"
  else
    TYPE="Ratio"
  fi
  TMP_FILE="${TMP_FILE}.${TYPE}"
  touch ${TMP_FILE}
  chmod 666 ${TMP_FILE} 2> /dev/null
  if [[  ! ( -r "${TMP_FILE}" ) ]] ; then
    OUTPUT="Temporal file is nor writeable"
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
  COMMAND_SNAPSHOT="db2 get snapshot for database on ${DATABASE}"
  if [[ ${VERBOSE} -ge 2 ]] ; then
    echo "COMMAND: ${COMMAND_SNAPSHOT}"
  fi
  ${COMMAND_SNAPSHOT} > ${TMP_FILE}

  if [[  ! ( -r "${TMP_FILE}" ) ]] ; then
    OUTPUT="Temporal file is nor readable"
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
  ERROR_START=$(grep SQL1032N ${TMP_FILE})
  if [[ ${ERROR_START} != "" ]] ; then
    OUTPUT="Instance not started"
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
  ERROR_DATA=$(grep SQL1611 ${TMP_FILE})
  if [[ ${ERROR_DATA} != "" ]] ; then
    OUTPUT="Snapshot could not be taken"
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
fi
if [[ ${CONTINUE} == true ]] ; then
  if [[ ${ASYNC} == false ]] ; then
    TYPE="PBPCT"
    LNS_GAP_C_T=$(awk '/LSN Gap cleaner triggers/ {print $6}' ${TMP_FILE})
    DIRTY_PAGE_STEAL_C_T=$(awk '/Dirty page steal cleaner triggers/ {print $7}' ${TMP_FILE})
    DIRTY_PAGE_THRESHOLD_C_T=$(awk '/Dirty page threshold cleaner triggers/ {print $7}' ${TMP_FILE})
    if [[ ${LNS_GAP_C_T} == "Not" || ${DIRTY_PAGE_STEAL_C_T} == "Not"
        || ${DIRTY_PAGE_THRESHOLD_C_T} == "Not" ]] ; then
      OUTPUT="Performance data is not collected"
      RETURN=${UNKNOWN}
    else
      TOTAL=$(( ${LNS_GAP_C_T} + ${DIRTY_PAGE_STEAL_C_T} + ${DIRTY_PAGE_THRESHOLD_C_T} ))
      if [[ ${TOTAL} -eq 0 ]] ; then
        PBPCT=0
        LNS_GAP_PER=0
        DIRTY_PAGE_THRESHOLD_PER=0
      else
        PBPCT=$(( ${DIRTY_PAGE_STEAL_C_T} * 100 / ${TOTAL} ))
        LNS_GAP_PER=$(( ${LNS_GAP_C_T} * 100 / ${TOTAL} ))
        DIRTY_PAGE_THRESHOLD_PER=$(( ${DIRTY_PAGE_THRESHOLD_C_T} * 100 / ${TOTAL} ))
      fi
      if [[ ${VERBOSE} -ge 3 ]] ; then
        echo "LNS Gap:'${LNS_GAP_C_T}'"
        echo "Dirty page steal:'${DIRTY_PAGE_STEAL_C_T}'"
        echo "Dirty page threshold:'${DIRTY_PAGE_THRESHOLD_C_T}'"
        echo "PBPCT%=${PBPCT}"
        echo "LNS Gap%=${LNS_GAP_PER}"
        echo "Threshold%=${DIRTY_PAGE_THRESHOLD_PER}"
      fi

      # Checks the value of PBPCT
      if [[ ${PBPCT} -lt ${WARNING_THRES} ]] ; then
        RETURN=${OK}
        OUTPUT="Percentage of Bad Page cleaner trigger is OK"
      elif [[ ${PBPCT} -lt ${CRITICAL_THRES} ]] ; then
        RETURN=${WARNING}
        OUTPUT="Bad page cleaner trigger is increasing, check writes"
      else
        RETURN=${CRITICAL}
        OUTPUT="Bad page cleaner trigger is impacting the performance"
      fi
      PERFORMANCE="'PBPCT'=${PBPCT}%;${WARNING_THRES};${CRITICAL_THRES};0;100"
      LNS_PERF="'LNS_Gap'=${LNS_GAP_PER}%"
      THRES_PERF="'Page_cleaner_threshold'=${DIRTY_PAGE_THRESHOLD_PER}%"
      LONG_PERFORMANCE="${LNS_PERF}\n${THRES_PERF}"
      SINGLE_PERFORMANCE="${PERFORMANCE} ${LNS_PERF} ${THRES_PERF}"
      PERF_MK="${PERFORMANCE}|${LNS_PERF}|${THRES_PERF}"
    fi  
  else
    TYPE="Ratio"
    BP_DATA_WRITES=$(awk '/Buffer pool data writes/ {print $6}' ${TMP_FILE})
    BP_ASYNC_DATA_WRITES=$(awk '/Asynchronous pool data page writes/ {print $7}' ${TMP_FILE})
    BP_INDEX_WRITES=$(awk '/Buffer pool index writes/ {print $6}' ${TMP_FILE})
    BP_ASYNC_INDEX_WRITES=$(awk '/Asynchronous pool index page writes/ {print $7}' ${TMP_FILE})
    if [[ ${BP_DATA_WRITES} == "Not" || ${BP_ASYNC_DATA_WRITES} == "Not"
        || ${BP_INDEX_WRITES} == "Not" || ${BP_ASYNC_INDEX_WRITES} == "Not" ]] ; then
      OUTPUT="Performance data is not collected"
      RETURN=${UNKNOWN}
    else 
      if [[ ${BP_DATA_WRITES} -eq 0 ]] ; then
        ASYNC_DATA_WRITES_PER=100
      else
        ASYNC_DATA_WRITES_PER=$(( ${BP_ASYNC_DATA_WRITES} * 100 / ${BP_DATA_WRITES} ))
      fi
      if [[ ${BP_INDEX_WRITES} -eq 0 ]] ; then
        ASYNC_INDEX_WRITES_PER=100
      else
        ASYNC_INDEX_WRITES_PER=$(( ${BP_ASYNC_INDEX_WRITES} * 100 / ${BP_INDEX_WRITES} ))
      fi
      if [[ ${VERBOSE} -ge 3 ]] ; then
        echo "Data writes:'${BP_DATA_WRITES}'"
        echo "Data async writes:'${BP_ASYNC_DATA_WRITES}'"
        echo "Index writes:'${BP_INDEX_WRITES}'"
        echo "Index async writes:'${BP_ASYNC_INDEX_WRITES}'"
        echo "Data async%=${ASYNC_DATA_WRITES_PER}"
        echo "Index async%=${ASYNC_INDEX_WRITES_PER}"
      fi

      # Checks the asynchronous writes.
      if [[ ${ASYNC_DATA_WRITES_PER} -gt ${WARNING_THRES} ]] ; then
        RETURN=${OK}
        OUTPUT="The quantity of asynchronous writes is Ok"
      elif [[ ${ASYNC_DATA_WRITES_PER} -gt ${CRITICAL_THRES} ]] ; then
        RETURN=${WARNING}
        OUTPUT="Quantity of asynchronous writes is increasing"
      else
        RETURN=${CRITICAL}
        OUTPUT="Quantity of asynchronous writes is bad and it is impacting the performance"
      fi
      if [[ ${ASYNC_INDEX_WRITES_PER} -gt ${WARNING_THRES} ]] ; then
        # The return is the same as in writes.
        OUTPUT="The quantity of asynchronous writes is Ok"
      elif [[ ${ASYNC_INDEX_WRITES_PER} -gt ${CRITICAL_THRES} ]] ; then
        if [[ ${RETURN} -lt ${WARNING} ]] ; then
          RETURN=${WARNING}
        fi
        OUTPUT="Quantity of asynchronous writes is increasing"
      else
        RETURN=${CRITICAL}
        OUTPUT="Quantity of asynchronous writes is bad and it is impacting the performance"
      fi
      ASYNC_DATA_PERF="'Async_data_writes'=${ASYNC_DATA_WRITES_PER}%;${WARNING_THRES};${CRITICAL_THRES};0;100"
      ASYNC_INDEX_PERF="'Async_index_writes'=${ASYNC_INDEX_WRITES_PER}%;${WARNING_THRES};${CRITICAL_THRES};0;100"
      PERFORMANCE="${ASYNC_DATA_PERF} ${ASYNC_INDEX_PERF}"
      SINGLE_PERFORMANCE="${ASYNC_DATA_PERF} ${ASYNC_INDEX_PERF}"
      PERF_MK="${ASYNC_DATA_PERF}|${ASYNC_INDEX_PERF}"
    fi
  fi
fi

# Prints the output.
if [[ ${OUTPUT} == "" ]] ; then
  OUTPUT="Note: The test was not executed."
  CONTINUE=false
  if [[ ${ASYNC} == false ]] ; then
    TYPE="PBPCT"
  else
    TYPE="Ratio"
  fi
fi
# Builds the output.
if [[ ${CHECK_MK} == true ]] ; then
  echo "${RETURN} ioCleaners${TYPE}-${INSTANCE_NAME} ${PERF_MK} ${OUTPUT}"
else
  if [[ ${SINGLE} == true ]] ; then
    echo "${OUTPUT}|${SINGLE_PERFORMANCE}"
  else
    echo -e "${OUTPUT}|${PERFORMANCE}\n${LONG_OUTPUT}|${LONG_PERFORMANCE}"
  fi
fi
# Returns the error code.
if [[ ${VERBOSE} -ge 2 ]] ; then
  echo "Return code: ${RETURN}"
fi
if [[ ${TRACE} == true ]] ; then
  echo -e "OUTPUT:${OUTPUT}\nPERF:${PERFORMANCE}\nLONG_OUT:${LONG_OUTPUT}\nLONGPERF:${LONG_PERFORMANCE}\nRET_CODE:${RETURN}" >> ${LOG}
  date >> ${LOG}
  echo -e "<<<<<\n" >> ${LOG}
fi

if [[ ${LOCKED} == true && -r ${LOCK_FILE} ]] ; then
  rm ${LOCK_FILE}
fi

echo "$(date +"%Y-%m-%d-%H.%M.%S") $$ Ended ${APPL_NAME} ${COPY_ARGS[@]}" >> /tmp/${APPL_NAME}.log

exit ${RETURN}

