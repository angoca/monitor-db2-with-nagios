#! /usr/bin/env bash

###############################################################################
# Monitor DB2 with Nagios
# Copyright 2013,2014,2015 Andres Gomez Casanova
# https://github.com/angoca/monitor-db2-with-nagios
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

# Checks the utilities that are currently running in the instance.  Throws a
# warning if a restore or backup is being performed.
#
# Here comes the documentation
#
# In order to be used in Nagios, you have to configure the following.
#
# # 'check_utilities' command definition
# define command {
#         command_name    check_utilities
#         command_line    $USER1$/check_by_ssh -H $HOSTADDRESS$ -l nagios -C "scripts/check_utilities -i '$ARG1$'"
# }
# define service{
#         host_name               db2server
#         service_description     List of utilities
#         check_command           check_utilities!/home/db2inst1
#         use                     generic-service
# }
#
# When using NRPE:
#
# In the database server:
#
# command[check_utilities]=/home/nagios/scripts/check_utilities -i /home/db2inst1
#
# Then modify the path according to your script location and instance home dir.
#
# In the Nagios server:
#
# define service{
#         host_name               db2server
#         service_description     List of utilities
#         check_command           check_nrpe_1arg!check_utilities
#         use                     generic-service
# }
#
# Parameters:
# -c | --critical : Quantity of utilities is critical.
# -h | --help : Show the help of this script.
# -i | --instance : Home directory of the instance. Usually it is
#   /home/db2inst1.
# -K | --mk : Change the output for Check_MK.
# -T | --trace : Trace mode. Writes output in /tmp.
# -v | --verbose : Execute the program in verbose mode.
# -V | --version : Show the current version of this script.
# -w | --warning : quantity of utilities is big.
#
# In AIX, the long name options are not supported.
#
# The exit codes are the standard for Nagios.
#
# 0 The plugin was able to check the service and it appeared to be functioning
#   properly.
# 1 The plugin was able to check the service, but it appeared to be above some
#   "warning" threshold or did not appear to be working properly.
# 2 The plugin detected that either the service was not running or it was above
#   some "critical" threshold.
# 3 Invalid command line arguments were supplied to the plugin or low-level
#   failures internal to the plugin (such as unable to fork, or open a tcp
#   socket) that prevent it from performing the specified operation.
#   Higher-level errors (such as name resolution errors, socket timeouts, etc)
#   are outside of the control of plugins and should generally NOT be reported
#   as UNKNOWN states.
#
# Author: Andres Gomez Casanova
# Version: v1.1 2015-10-15

# Flag for debugging.
#set -xv

# Locale to print messages in English. Prevent language problems.
export LANG=en_US

# Version of this script.
function print_revision {
  echo Andres Gomez Casanova - AngocA
  echo v1.1 2015-10-15
}
# Function to show the help
function print_usage {
  /bin/cat <<__EOT
Usage: ${1} { -i instanceHomeDirectory [-c][-w][-K] | -h | -V }[-T][-v]
__EOT
}

function print_help {
  print_revision
  print_usage ${1}
  # Max 80 chars width.
  /bin/cat <<__EOT
-------------------------------------------------------------------------------
Checks the quantity of utilities currently running in the instance.
-c | --critical INTEGER
   Quantity of utilities running is critical.
   Default 10.
-h | --help
   Shows the current documentation.
-i | --instance STRING
   Instance home directory. It is usually /home/db2inst1.
-K | --mk
   Changes the output to be compatible with Check_MK
-T | --trace
   Trace mode: writes date and output in /tmp.
-v | --verbose
   Executes the script in verbose mode (multiple times).
-V | --version
   Shows the current version of this script.
-w | --warning INTEGER
   Quantity of utilities running is considered as a warning.
   Default 5.

In AIX, the long name options are not supported.
__EOT
}

# Variable to control the flow execution. Prevent Spaghetti code.
CONTINUE=true

# Nagios return codes
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
# This is the returned code.
RETURN=${UNKNOWN}

# Nagios Output
# Text output 80 chars | Optional Perf Data Line 1
# Long text Line 1
# Long text Line 2 | Optional Perf Data Line 2
# Optional Perf Data Line 3
OUTPUT=
PERFORMANCE=
LONG_OUTPUT=
LONG_PERFORMANCE=
PERF_MK="-"

APPL_NAME=$(basename ${0})

echo "$(date +"%Y-%m-%d-%H.%M.%S") $$ Started ${APPL_NAME} $@" >> /tmp/${APPL_NAME}.log

# Checks the lock file does not exist.
# The lock file is the way the command was called with its parameters
# without spaces.
COPY_ARGS=("${@}") 
LOCK_FILE=
for VALUE in "${COPY_ARGS[@]}" ; do
  LOCK_FILE="${LOCK_FILE}${VALUE}"
done
LOCK_FILE=${LOCK_FILE//\//}
LOCK_FILE=${LOCK_FILE//\\/}
LOCK_FILE=${LOCK_FILE//\:/}
LOCK_FILE=${LOCK_FILE//\*/}
LOCK_FILE=${LOCK_FILE//\|/}
LOCK_FILE="/tmp/${APPL_NAME}${LOCK_FILE}.lock"
if [[ ! -r ${LOCK_FILE} ]] ; then
  echo $$ > ${LOCK_FILE}
  LOCKED=true
else
  # If it exist, then check if the process is running.
  EXIST=$(ps -ef | grep $(cat ${LOCK_FILE}) | grep ${APPL_NAME})
  # If process is not running, delete it.
  if [[ ${EXIST} == "" ]] ; then
    rm ${LOCK_FILE}
    if [[ ! -r ${LOCK_FILE} ]] ; then
      echo $$ > ${LOCK_FILE}
      LOCKED=true
    else
      OUTPUT="The lock file cannot be replaced: ${LOCK_FILE}"
      CONTINUE=false
      RETURN=${UNKNOWN}
    fi
  else
    OUTPUT="An instance of the script with the same parameters is already running."
    CONTINUE=false
    RETURN=${UNKNOWN}
  fi
fi

if [[ ${#} -eq 0 ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

# Checks the operating system. geopt works different in AIX than in Linux.
OS=$(uname)

if [[ "${OS:0:5}" == "Linux" ]] ; then
  # The following requires GNU getopt. See the following discussion.
  # http://stackoverflow.com/questions/402377

  TEMP=$(getopt -o c:hi:KTvVw: --long critical:,help,instance:,mk,trace,verbose,version,warning: \
               -n ${APPL_NAME} -- "${@}")


elif [[ "${OS:0:3}" == "AIX" ]] ; then
  set -- $(getopt c:hi:KTvVw: ${*})
elif [[ "${OS:0:6}" == "Darwin" || "${OS:0:5}" == "SunOS" || "${OS:0:5}" == "HP-UX" ]] ; then
  echo "This plugin is not yet supported in your platform."
  echo "Please create a ticket in GitHub if you want to enable your current platform."
  echo "https://github.com/angoca/monitor-db2-with-nagios/issues"
  RETURN=${UNKNOWN}
  CONTINUE=false
elif [[ "${OS:0:6}" == "CYGWIN" ]] ; then
  echo "This plugin is not supported in Cygwin"
  RETURN=${UNKNOWN}
  CONTINUE=false
else
  echo "The platform is unknown: ${OS}"
  echo "Please create a ticket in GitHub: https://github.com/angoca/monitor-db2-with-nagios/issues"
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${?} -ne 0 ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  if [[ "${OS}" == "Linux" ]] ; then
    # Note the quotes around ${TEMP}: they are essential!
    eval set -- "${TEMP}"
  fi
  HELP=false
  VERSION=false
  CHECK_MK=false
  # Verbosity level
  VERBOSE=0
  # Trace activated
  TRACE=false
  LOG=/tmp/${APPL_NAME}.log
  INSTANCE_HOME=
  WARNING_THRES=5
  CRITICAL_THRES=10
  if [[ "${OS:0:5}" == "Linux" ]] ; then
    while true; do
      case "${1}" in
        -c | --critical ) CRITICAL_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -h | --help ) HELP=true ; shift ;;
        -i | --instance ) INSTANCE_HOME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -K | --mk ) CHECK_MK=true ; shift ;;
        -T | --trace ) TRACE=true ; shift ;;
        -v | --verbose ) VERBOSE=$(( ${VERBOSE} + 1 )) ; shift ;;
        -V | --version ) VERSION=true ; shift ;;
        -w | --warning ) WARNING_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -- ) shift ; break ;;
        * ) break ;;
      esac
    done
  elif [[ "${OS:0:3}" = "AIX" ]] ; then
    while [[ $1 != -- ]] ; do
      case "${1}" in
        -c) CRITICAL_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -h) HELP=true ; shift ;;
        -i) INSTANCE_HOME=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        -K) CHECK_MK=true ; shift ;;
        -T) TRACE=true ; shift ;;
        -v) VERBOSE=$(( ${VERBOSE} + 1 )) ; shift ;;
        -V) VERSION=true ; shift ;;
        -w) WARNING_THRES=$(echo ${2} | cut -d' ' -f1) ; shift 2 ;;
        * ) break ;;
      esac
    done
  fi
fi

if [[ ${TRACE} == true ]] ; then
  echo ">>>>>" >> ${LOG}
  date >> ${LOG}
  echo "Instance at ${INSTANCE_HOME}" >> ${LOG}
  echo "PID ${$}" >> ${LOG}
fi

ECHO="help:${HELP}, version:${VERSION}, verbose:${VERBOSE}"
ECHO="${ECHO}, directory:${INSTANCE_HOME}, check_mk:${CHECK_MK}"
ECHO="${ECHO}, warning:${WARNING_THRES}, critical:${CRITICAL_THRES}"

if [[ ${VERBOSE} -ge 2 ]] ; then
  echo ${ECHO}
fi

if [[ ${TRACE} == true ]] ; then
  echo "PARAMS:${ECHO}" >> ${LOG}
fi

if [[ ${CONTINUE} == true && ${HELP} == true ]] ; then
  print_help ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${VERSION} == true ]] ; then
  print_revision ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && ${INSTANCE_HOME} == "" ]] ; then
  print_usage ${APPL_NAME}
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true
    && ( ${WARNING_THRES} == "" || ${CRITICAL_THRES} == ""
    || ! ${WARNING_THRES} =~ ^[0-9]+$ || ! ${CRITICAL_THRES} =~ ^[0-9]+$
    || ${WARNING_THRES} -le 0 || ${CRITICAL_THRES} -le 0
    || ${WARNING_THRES} -ge ${CRITICAL_THRES} ) ]] ; then
  print_usage ${APPL_NAME}
  echo "Warning threshold should be less than critical threshold."
  echo "Threshold should be greater than 0."
  RETURN=${UNKNOWN}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  if [[ -d ${INSTANCE_HOME} && -e ${INSTANCE_HOME}/sqllib/db2profile ]] ; then
    # Load the DB2 profile.
    . ${INSTANCE_HOME}/sqllib/db2profile
    INSTANCE_NAME=$(db2 get instance | awk '/instance/ {print $7}')
  else
    OUTPUT="Instance directory is invalid."
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
fi

if [[ ${CONTINUE} == true ]] ; then
  COMMAND_UTILITIES="db2 list utilities"
  if [[ ${VERBOSE} -ge 2 ]] ; then
    echo "COMMAND: ${COMMAND_UTILITIES}"
  fi
  OUTPUT_UTILITIES=$(${COMMAND_UTILITIES})
  if [[ ${VERBOSE} -ge 3 ]] ; then
    echo "OUTPUT: ${OUTPUT_UTILITIES}"
  fi
  ERROR=$(printf '%s\n' "${OUTPUT_UTILITIES}" | grep SQL1092)
  if [[ ${ERROR} != "" ]] ; then
    OUTPUT="The current user cannot execute this script: ${OUTPUT_UTILITIES}"
    RETURN=${UNKNOWN}
    CONTINUE=false
  fi
fi
if [[ ${CONTINUE} == true ]] ; then
  RESTORE_QTY=$(printf '%s\n' "${OUTPUT_UTILITIES}" | grep RESTORE | wc -l)
  # A Restore or a Backup is synonime of a warning.
  if [[ ${RESTORE_QTY} -ge 1 ]] ; then
    OUTPUT="Performing ${RESTORE_QTY} restore(s). "
    RETURN=${WARNING}
  fi
  BACKUP_QTY=$(printf '%s\n' "${OUTPUT_UTILITIES}" | grep BACKUP | wc -l)
  if [[ ${BACKUP_QTY} -ge 1 ]] ; then
    OUTPUT="${OUTPUT}Performing ${BACKUP_QTY} backup(s). "
    RETURN=${WARNING}
  fi

  RUNSTATS_QTY=$(printf '%s\n' "${OUTPUT_UTILITIES}" | grep RUNSTATS | wc -l)
  if [[ ${RUNSTATS_QTY} -ge 1 ]] ; then
    OUTPUT="${OUTPUT}Performing ${RUNSTATS_QTY} runstats(s). "
  fi
  REORGS_QTY=$(printf '%s\n' "${OUTPUT_UTILITIES}" | grep REORG | wc -l)
  if [[ ${REORGS_QTY} -ge 1 ]] ; then
    OUTPUT="${OUTPUT}Performing ${REORGS_QTY} reorg(s). "
  fi
  OTHERS=$(printf '%s\n' "${OUTPUT_UTILITIES}" | grep "^Type" | grep -v RESTORE | grep -v BACKUP | grep -v RUNSTATS | grep -v REORG | grep -v "ROLLFORWARD RECOVERY" | awk -F= '{print $2}')
  OTHERS_QTY=$(printf '%s\n' "${OUTPUT_UTILITIES}" | grep "^Type" | grep -v RESTORE | grep -v BACKUP | grep -v RUNSTATS | grep -v REORG | wc -l)
  if [[ ${OTHERS} != "" ]] ; then
    OUTPUT="${OUTPUT}Other utilities are running: ${OTHERS}"
    RETURN=${WARNING}
  fi
  QTY=$(printf '%s\n' "${OUTPUT_UTILITIES}" | grep "^Type" | wc -l)
  if [[ ${QTY} -ge ${CRITICAL_THRES} ]] ; then
    RETURN=${CRITICAL}
    OUTPUT="Quantity  of utilities currently running is critical: ${QTY}. ${OUTPUT}"
  elif [[ ${QTY} -ge ${WARNING_THRES} ]] ; then
    RETURN=${WARNING}
    OUTPUT="Quantity of utilities currently running is: ${QTY}. ${OUTPUT}"
  else
    if [[ ${RETURN} == ${UNKNOWN} ]] ; then
      RETURN=${OK}
    fi
    OUTPUT="Quantity of utilities is normal: ${QTY}."
  fi
  PERFORMANCE="Utilities=${QTY};${WARNING_THRES};${CRITICAL_THRES}"
  LONG_PERFORMANCE="$(echo ${RESTORE_QTY}) Backup=$(echo ${BACKUP_QTY}) Runstats=$(echo ${RUNSTATS_QTY}) Reorgs=$(echo ${REORGS_QTY}) Others=$(echo ${OTHERS_QTY}) "
  PERF_MK="${PERFORMANCE}|Restore=$(echo ${RESTORE_QTY})|Backup=$(echo ${BACKUP_QTY})|Runstats=$(echo ${RUNSTATS_QTY})|Reorgs=$(echo ${REORGS_QTY})|Others=$(echo ${OTHERS_QTY})"
fi

# Prints the output.
if [[ ${OUTPUT} == "" ]] ; then
  OUTPUT="Note: The test was not executed."
fi
# Builds the output.
if [[ ${CHECK_MK} == true ]] ; then
  echo "${RETURN} utilities-${INSTANCE_NAME} ${PERF_MK} ${OUTPUT}"
else
  echo -e "${OUTPUT}|${PERFORMANCE}\n${LONG_OUTPUT}|${LONG_PERFORMANCE}"
fi
# Returns the error code.
if [[ ${VERBOSE} -ge 2 ]] ; then
  echo "Return code: ${RETURN}"
fi
if [[ ${TRACE} == true ]] ; then
  echo -e "OUTPUT:${OUTPUT}\nPERF:${PERFORMANCE}\nLONG_OUT:${LONG_OUTPUT}\nLONGPERF:${LONG_PERFORMANCE}\nRET_CODE:${RETURN}" >> ${LOG}
  date >> ${LOG}
  echo -e "<<<<<\n" >> ${LOG}
fi

if [[ ${LOCKED} == true && -r ${LOCK_FILE} ]] ; then
  rm ${LOCK_FILE}
fi

echo "$(date +"%Y-%m-%d-%H.%M.%S") $$ Ended ${APPL_NAME} ${COPY_ARGS[@]}" >> /tmp/${APPL_NAME}.log

exit ${RETURN}

